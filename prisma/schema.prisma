// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles       Role[]


  collectionId String?
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  username  String  @unique
  name      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  roles    Role[]
}

model Password {
  hash String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

// Define the model for collections
model Collection {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt

  title         String
  handle        String     @unique
  description   String?    @default("")
  
  fields        Field[]
  entries       Entry[]
  permissions   Permission[]
}

// Define the model for fields
model Field {
  id            String     @id @default(cuid())

  title         String
  handle        String
  sortOrder     Int
  type          String
  description   String?    @default("")     
  isRequired    Boolean?   @default(false)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  options      FieldOptions[]
  values       FieldValue[]

  @@unique([collectionId, handle])
}

model FieldOptions {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  
  fieldId       String
  field         Field      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model Entry {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt

  title         String
  slug          String     @unique

  collectionId String
  collection   Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  fields       FieldValue[]
}

model FieldValue {
  id          String   @id @default(cuid())

  textValue     String?  @default("")
  booleanValue  Boolean? @default(false)

  mediaValueId  String?
  mediaValue    Media?   @relation(fields: [mediaValueId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  fieldId     String
  field       Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  entryId String
  entry   Entry     @relation(fields: [entryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([fieldId, entryId])
}

model Media {
  id          String   @id @default(cuid())
  
  mediaType   String
  title       String
  altText     String?
  url         String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  fieldValues FieldValue[]
}