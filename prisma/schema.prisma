// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password Password?
}

model Password {
  hash String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model ProjectConfig {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt

  version       BigInt     @default(1)
  
  contentTypes  ContentType[]
}

// Define the model for content types
model ContentType {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt

  title         String
  handle        String     @unique
  description   String?

  projectConfigId String
  projectConfig   ProjectConfig @relation(fields: [projectConfigId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  fields            Field[]
  entries           Entry[]
}

// Define the model for fields
model Field {
  id            String     @id @default(cuid())

  title         String
  handle        String
  sortOrder     Int
  type          String
  description   String?    @default("")     
  isRequired    Boolean?   @default(false)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)

  options       FieldOptions[]
  values        FieldValue[]

  @@unique([contentTypeId, handle])
}

model FieldOptions {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  
  fieldId       String
  field         Field      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model Entry {
  id            String       @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt

  contentTypeId String
  contentType   ContentType  @relation(fields: [contentTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  fields        FieldValue[]
}

model FieldValue {
  id      Int       @id @default(autoincrement())

  fieldId String
  field   Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  entryId String
  entry   Entry     @relation(fields: [entryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([fieldId, entryId])
}